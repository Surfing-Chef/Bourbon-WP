// apifier.js //
// Uses ajax and jsonp to retreive feeds from
// Epicurious.com, Food52.com, LuckyPeach.com,
// Saveur.com and Foodandwine.com
//------------------------------------------------------------------//

// Load Apifier API
$.ajax({
   url: templateDir + '/apifier.json',
   async: false,
   dataType: 'json',
   success: function (data) {
       //apifierData = data;
       apifierApi = data.user;
   },
   error: function() {
        alert("Darn it! The Apifier API wasn't loaded.");
      }
});

// VARIABLES
var prefix = 'https://api.apifier.com/v1/';
var api = apifierApi;
var crawlId = '359hHayJT8Cefmu2R';
var suffix = '/crawlers/'+crawlId+'?token=rQCrS5BnTTp3J46P7SkxHam89';
var urlSettings = prefix + apifierApi + suffix;

// Load apifier settings
$.ajax({
   url: urlSettings,
   async: false,
   dataType: 'json',
   success: function (data) {
     apifierSettings = data.lastExecution.resultsUrl;
   },
   error: function(XMLHttpRequest, textStatus, errorThrown) {
        alert("Oops! The Apifier settings weren't found.");
      }
});

// Function :: displayApifier()
// parses JSON returned from Apifier
function displayApifier(obj){
  var temp = [];
  var feedArray = [];

  // Sort all object arrays
  Object.keys(obj).forEach(function(key){
    temp.push(obj[key].pageFunctionResult);
  });

  // Discard empty arrays
  for(var a=0; a<temp.length; a++){
    for(var b=0; b<5; b++){
      if(temp[a][b].length > 0){
        feedArray.push(temp[a][b]);
      }
    }
  }

  // Create objects for easy deployment to page:
  // base, imageUrl, linkUrl, title, topic
  var saveur = feedArray[0];
  var foodandwine = feedArray[1];
  var food52 = feedArray[2];
  var luckypeach = feedArray[3];
  var cooksillustrated = feedArray[4];

  // Add a label value to each array
  saveur.name = 'saveur';
  foodandwine.name = 'foodandwine';
  food52.name = 'food52';
  luckypeach.name = 'luckypeach';
  cooksillustrated.name = 'cooksillustrated';

  // Function :: show()
  // displays each item where appropriate,
  // for css formatting
  function show(obj){
    // get object name
    var objName = obj.name;
    var link = '';

    obj.forEach(function(dta){
      // if links have http prefix...
      if(dta.linkUrl.startsWith('http://')){
        var tag = $('<a href="'+dta.linkUrl+'" target="_blank">'+dta.title+'</a><br>');

        $("#"+objName).append(tag);
      }
      // if links DO NOT have http prefix...
      else {
        var link = dta.base + dta.linkUrl;
        var tag1 = $('<a href="'+link+'" target="_blank">'+dta.title+'</a><br>');

        $("#"+objName).append(tag1);
      }
    });
  }

  // Display feeds as defined
  show(saveur);
  show(foodandwine);
  show(food52);
  show(luckypeach);
  show(cooksillustrated);
}

// load APLIFIER data
$.ajax({
  url: apifierSettings,
  async: false,
  dataType: 'json',
  success: function (data) {
    displayApifier(data);
  },
  error: function(XMLHttpRequest, textStatus, errorThrown) {
       alert("Oh snap! Data from Apifier wasn't loaded.");
     }
});

// darksky.js //
// Uses ajax and jsonp to retreive current weather and forecasts
// Powered by Dark Sky
//------------------------------------------------------------------//

var srcBase = "http://localhost:3000/bourbon-wp/wp-content/themes/bourbon-wp/src/";
// Load api
$.ajax({
   url: templateDir + '/darksky.json',
   async: false,
   dataType: 'json',
   success: function (data) {
       mydata = data;
       myapi = data.api;
   },
   error: function () {
     alert("Oops! Something went wrong while loading the Dark Sky API.");
   }
});

// VARIABLES
var api = myapi;
var urlBase = 'https://api.darksky.net/forecast/';
// Nakusp Hotsprings
var latitude = '50.2963';
var longitude = '-117.6857';
var loc = latitude +','+ longitude;
var units = 'auto';
var url = urlBase + api + '/' + loc + '?units=' + units;
var dsForecastUrl = "https://darksky.net/forecast/"+loc+"/ca12/en";

// Create the function the JSON data will be passed to.
function weatherData(json) {
  // test container
  if (document.getElementById('weather')) {
    target = document.getElementById('weather');
  } //element exists in the document.
  else {
    return;
  }

  // current date (timestamp)
  //unixDate = unx;

  // Convert timestamp into an array
  function dateTime(aDate, request){
    // Date from converted timestamp
    rawDate = aDate;
    // Convert to string...
    strDate = rawDate.toString();
    // String to array
    arrDate = strDate.split(' ');
    // Return requested data from array
    if(request == "date"){
      return arrDate[1] +" "+ arrDate[2] +", "+ arrDate[3];
    } else if (request == "time") {
      return arrDate[4];
    } else {
      return "Today...";
    }
  }

  // Currently
  ds_current_timestamp  = json.currently.time;
  ds_current_full_date = Date(ds_current_timestamp);
  ds_current_date = dateTime(ds_current_full_date, 'date');
  updated = dateTime(ds_current_full_date, 'time');
  currently  = json.currently.summary;
  currently_icon  = json.currently.icon;
  currently_temp  = Math.round(json.currently.temperature);
  apparent_temp  = Math.round(json.currently.apparentTemperature);

  // Forecast summaries
  st_forecast_summary  = json.hourly.summary;
  lt_forecast_summary  = json.daily.summary;

  // Create Weather Widget
  target.innerHTML =
    "<span class=\"gps\">"+latitude+", "+longitude+"</span>"+
    "<span>Backcountry Near Nakusp, British Columbia</span>"+
    "<img src=\""+srcBase+"images/"+currently_icon+".png\" alt=\""+currently_icon+"\">"+
    "<span class=\"currently\">"+currently+"</span>"+
    "<span class=\"cur-temp\">Temperature is: "+currently_temp+"</span>"+
    "<span class=\"app-temp\">Feels Like: "+apparent_temp+"</span>"+
    "<span class=\"st-forecast\">Short Term: "+st_forecast_summary+"</span>"+
    "<span class=\"lt-forecast\">Long Term: "+lt_forecast_summary+"</span>"+
    "<span class=\"updated\">updated: "+ds_current_full_date+"</span>";
}

// load Darksky JSON data
$.ajax({
  type: "GET",
  url: url,
  dataType: 'jsonp',
  jsonpCallback: 'weatherData', // the function to call
  jsonp: 'callback', // name of the var specifying the callback in the request
  error: function () {
    alert("Oh oh! Had a hiccup getting weather data from Dark Sky." );
  }
});

$(document).ready(function() {
  var iconStartW = $(".icon").width();
  var iconStartH = $(".icon").height();
  var icon = $(".icon")
  .hover( function(){
    TweenLite.to(this, 0.1, {scaleX:1.05, scaleY:1.05});
  }, function(){
    TweenLite.to(this, 0.3, {scaleX:1, scaleY:1});
  });
});

// RESPONSIVE MENU
$(window).on("load resize",function(e) {
  var more = document.getElementById("js-centered-more");

  if ($(more).length > 0) {
    var windowWidth = $(window).width();
    var moreLeftSideToPageLeftSide = $(more).offset().left;
    var moreLeftSideToPageRightSide = windowWidth - moreLeftSideToPageLeftSide;

    if (moreLeftSideToPageRightSide < 330) {
      $("#js-centered-more .submenu .submenu").removeClass("fly-out-right");
      $("#js-centered-more .submenu .submenu").addClass("fly-out-left");
    }

    if (moreLeftSideToPageRightSide > 330) {
      $("#js-centered-more .submenu .submenu").removeClass("fly-out-left");
      $("#js-centered-more .submenu .submenu").addClass("fly-out-right");
    }
  }

  var menuToggle = $("#js-centered-navigation-mobile-menu").unbind();
  $("#js-centered-navigation-menu").removeClass("show");

  menuToggle.on("click", function(e) {
    e.preventDefault();
    $("#js-centered-navigation-menu").slideToggle(function(){
      if($("#js-centered-navigation-menu").is(":hidden")) {
        $("#js-centered-navigation-menu").removeAttr("style");
      }
    });
  });
});

$(window).scroll(function(){

  // SCREEN VARIABLES
  var wScroll = $(this).scrollTop();

  $('.callout').css({
    'transform' : 'translate(0px, '+ wScroll *0.4 +'px)'
  });

});

// SCROLLING HEADER
$(document).ready(function() {
  if ($("#js-parallax-window").length) {
    parallax();
  }
});

$(window).scroll(function(e) {
  if ($("#js-parallax-window").length) {
    parallax();
  }
});

function parallax(){
  if( $("#js-parallax-window").length > 0 ) {
    var plxBackground = $("#js-parallax-background");
    var plxWindow = $("#js-parallax-window");

    var plxWindowTopToPageTop = $(plxWindow).offset().top;
    var windowTopToPageTop = $(window).scrollTop();
    var plxWindowTopToWindowTop = plxWindowTopToPageTop - windowTopToPageTop;

    var plxBackgroundTopToPageTop = $(plxBackground).offset().top;
    var windowInnerHeight = window.innerHeight;
    var plxBackgroundTopToWindowTop = plxBackgroundTopToPageTop - windowTopToPageTop;
    var plxBackgroundTopToWindowBottom = windowInnerHeight - plxBackgroundTopToWindowTop;
    var plxSpeed = 0.35;

    plxBackground.css('top', - (plxWindowTopToWindowTop * plxSpeed) + 'px');
  }
}

$(document).ready(function () {
  $('.accordion-tabs').each(function(index) {
    $(this).children('li').first().children('a').addClass('is-active').next().addClass('is-open').show();
  });
  $('.accordion-tabs').on('click', 'li > a.tab-link', function(event) {
    if (!$(this).hasClass('is-active')) {
      event.preventDefault();
      var accordionTabs = $(this).closest('.accordion-tabs');
      accordionTabs.find('.is-open').removeClass('is-open').hide();

      $(this).next().toggleClass('is-open').toggle();
      accordionTabs.find('.is-active').removeClass('is-active');
      $(this).addClass('is-active');
    } else {
      event.preventDefault();
    }
  });
});

// DOCUMENT READY
$(document).ready(function() {
  // BACK TO TOP BUTTON
  //----------------------------------------------
  var offset = 100;
  var duration = 300;

  $('.back-to-top').css( "display", "none" );

  jQuery(window).scroll(function() {
    if (jQuery(this).scrollTop() > offset) {
      jQuery('.back-to-top').fadeIn(duration);
    } else {
      jQuery('.back-to-top').fadeOut(duration);
    }
  });

  jQuery('.back-to-top').click(function(event) {
    event.preventDefault();
    jQuery('html, body').animate({scrollTop: 0}, duration);
    return false;
  });

// QUOTE FUNCTION
//----------------------------------------------
// Define a quote library
  var quoteSource=[
  {
    quote: "If you want to become a great chef, you have to work with great chefs. And that's exactly what I did.",
    name:"Gordon Ramsay"
    },
    {
      quote:"You can call me the bad boy chef all you want. I'm not going to freak out about it. I'm not that bad. I'm certainly not a boy, and it's been a while since I've been a chef.",
      name:"Anthony Bourdain"
    },
    {
      quote:"It does not matter how slowly you go as long as you do not stop.",
      name:"Confucius"
    },
    {
      quote:"Our greatest weakness lies in giving up. The most certain way to succeed is always to try just one more time.",
      name:"Thomas A. Edison"
    },
    {
      quote:"If you're not the one cooking, stay out of the way and compliment the chef.",
      name:"Michael Strahan"
    },
    {
      quote:"A home cook who relies too much on a recipe is sort of like a pilot who reads the plane’s instruction manual while flying.",
      name:"Alton Brown"
    },
    {
      quote:"First, knife skills. Then, knowing how to control heat. Most important is choosing the right product... the rest is simple.",
      name:"Justin Quek"
    },
    {
      quote:"A creative man is motivated by the desire to achieve, not by the desire to beat others.",
      name:"Ayn Rand"
    },
    {
      quote:"When baking, follow directions. When cooking, go by your own taste",
      name:"Laiko Bahrs"
    },
    {
      quote:"Fish, to taste right, must swim three times – in water, in butter and in wine.",
      name:"Polish proverb"
    },
    {
      quote:"We're hoping to succeed; we're okay with failure. We just don't want to land in between.",
      name:"David Chang"
    },
    {
      quote:"A great restaurant doesn't distinguish itself by how few mistakes it makes but by how well they handle those mistakes.",
      name:"Danny Meyer"
    },
    {
      quote:"Two things are infinite: the universe and human stupidity; and I'm not sure about the universe.",
      name:"Albert Einstein"
    },
    {
      quote:"When you have made as many mistakes as I have then you can be as good as me.",
      name:"Wolfgang Puck"
    },
    {
      quote:"I would much rather be a chef who remembers I am a cook then a cook that thinks I am a chef.",
      name:"Richard (Ric) Peterson"
    },
    {
      quote:"I love the man that can smile in trouble, that can gather strength from distress, and grow brave by reflection. ’Tis the business of little minds to shrink, but he whose heart is firm, and whose conscience approves his conduct, will pursue his principles unto death.",
      name:"Thomas Paine"
    },
    {
      quote:"Successful people do what unsuccessful people are not willing to do. Don’t wish it were easier, wish you were better.",
      name:"Jim Rohn"
    },
    {
      quote:"Twenty years from now you will be more disappointed by the things that you didn’t do than by the ones you did do, so throw off the bowlines, sail away from safe harbor, catch the trade winds in your sails. Explore, Dream, Discover.",
      name:"Mark Twain"
    },
    {
      quote:"There are two types of people who will tell you that you cannot make a difference in this world: those who are afraid to try and those who are afraid you will succeed.",
      name:"Ray Goforth"
    },
    {
      quote:"There will be obstacles. There will be doubters. There will be mistakes. But with hard work, there are no limits.",
      name:"Michael Phelps"
    },
    {
      quote:"When I was 5 years old, my mother always told me that happiness was the key to life. When I went to school, they asked me what I wanted to be when I grew up. I wrote down “happy”. They told me I didn’t understand the assignment, and I told them they didn’t understand life.",
      name:"John Lennon"
    },
    {
      quote:"Vegetarians, and their Hezbollah-like splinter faction, the vegans ... are the enemy of everything good and decent in the human spirit.",
      name:"Anthony Bourdain"
    },
    {
      quote:"Oh, I'll accomodate them, I'll rummage around for something to feed them, for a 'vegetarian plate', if called on to do so. Fourteen dollars for a few slices of grilled eggplant and zucchini suits my food cost fine.",
      name:"Anthony Bourdain"
    },
    {
      quote:"Few things are more beautiful to me than a bunch of thuggish, heavily tattooed line cooks moving around each other like ballerinas on a busy Saturday night. Seeing two guys who'd just as soon cut each other's throats in their off hours moving in unison with grace and ease can be as uplifting as any chemical stimulant or organized religion.",
      name:"Anthony Bourdain"
    }

  ];

  // Get a new random number based on number of quotes
  var sourceLength = quoteSource.length;
  var randomNumber= Math.floor(Math.random()*sourceLength);

  // Set a new quote
  for(i=0;i<=sourceLength;i+=1){
    var newQuoteText = quoteSource[randomNumber].quote;
    var newQuoteGenius = quoteSource[randomNumber].name;
    var quoteContainer = $('.callout-container');

    quoteContainer.html('');
    quoteContainer.append('<p class="quote">'+newQuoteText+'</p>'+'<p class="author">'+newQuoteGenius+'</p>');
  } //end for loop

}); // END DOCUMENT READY


$(function(){

    //set global variables and cache DOM elements for reuse later
    var form = $('#contact-form').find('form'),
        formElements = form.find('input[type!="submit"],textarea'),
        formSubmitButton = form.find('[type="submit"]'),
        errorNotice = $('#errors'),
        successNotice = $('#success'),
        loading = $('#loading'),
        errorMessages = {
            required: ' is a required field',
            email: 'You have not entered a valid email address for the field: ',
            minlength: ' must be greater than '
        };

    //feature detection + polyfills
    formElements.each(function(){

        //if HTML5 input placeholder attribute is not supported
        if(!Modernizr.input.placeholder){
            var placeholderText = this.getAttribute('placeholder');
            if(placeholderText){
                $(this)
                    .addClass('placeholder-text')
                    .val(placeholderText)
                    .bind('focus',function(){
                        if(this.value == placeholderText){
                            $(this)
                                .val('')
                                .removeClass('placeholder-text');
                        }
                    })
                    .bind('blur',function(){
                        if(this.value === ''){
                            $(this)
                                .val(placeholderText)
                                .addClass('placeholder-text');
                        }
                    });
            }
        }

        //if HTML5 input autofocus attribute is not supported
        if(!Modernizr.input.autofocus){
            if(this.getAttribute('autofocus')) this.focus();
        }

    });

    //to ensure compatibility with HTML5 forms, we have to validate the form on submit button click event rather than form submit event.
    //An invalid html5 form element will not trigger a form submit.
    formSubmitButton.bind('click',function(){
        var formok = true,
            errors = [];

        formElements.each(function(){
            var name = this.name,
                nameUC = name.ucfirst(),
                value = this.value,
                placeholderText = this.getAttribute('placeholder'),
                type = this.getAttribute('type'), //get type old school way
                isRequired = this.getAttribute('required'),
                minLength = this.getAttribute('data-minlength');

            //if HTML5 formfields are supported
            if( (this.validity) && !this.validity.valid ){
                formok = false;

                //if there is a value missing
                if(this.validity.valueMissing){
                    errors.push(nameUC + errorMessages.required);
                }
                //if this is an email input and it is not valid
                else if(this.validity.typeMismatch && type == 'email'){
                    errors.push(errorMessages.email + nameUC);
                }

                this.focus(); //safari does not focus element an invalid element
                return false;
            }

            //if this is a required element
            if(isRequired){
                //if HTML5 input required attribute is not supported
                if(!Modernizr.input.required){
                    if(value == placeholderText){
                        this.focus();
                        formok = false;
                        errors.push(nameUC + errorMessages.required);
                        return false;
                    }
                }
            }

            //if HTML5 input email input is not supported
            if(type == 'email'){
                if(!Modernizr.inputtypes.email){
                    var emailRegEx = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;
                     if( !emailRegEx.test(value) ){
                        this.focus();
                        formok = false;
                        errors.push(errorMessages.email + nameUC);
                        return false;
                    }
                }
            }

            //check minimum lengths
            if(minLength){
                if( value.length < parseInt(minLength) ){
                    this.focus();
                    formok = false;
                    errors.push(nameUC + errorMessages.minlength + minLength + ' charcters');
                    return false;
                }
            }
        });

        //if form is not valid
        if(!formok){

            //animate required field notice
            $('#req-field-desc')
                .stop()
                .animate({
                    marginLeft: '+=' + 5
                },150,function(){
                    $(this).animate({
                        marginLeft: '-=' + 5
                    },150);
                });

            //show error message
            showNotice('error',errors);

        }
        //if form is valid
        else {
        	loading.show();
            $.ajax({
                url: form.attr('action'),
                type: form.attr('method'),
                data: form.serialize(),
                success: function(){
                    showNotice('success');
                    form.get(0).reset();
                    loading.hide();
                }
            });
        }

        return false; //this stops submission off the form and also stops browsers showing default error messages

    });

    //other misc functions
    function showNotice(type,data){
        if(type == 'error'){
            successNotice.hide();
            errorNotice.find("li[id!='info']").remove();
            for(var x in data){
                errorNotice.append('<li>'+data[x]+'</li>');
            }
            errorNotice.show();
        }
        else {
            errorNotice.hide();
            successNotice.show();
        }
    }

    String.prototype.ucfirst = function() {
        return this.charAt(0).toUpperCase() + this.slice(1);
    };
});
